openapi: 3.0.1
info:
  title: management-api
  description: REST API documentation for the management-api
  version: 3.1.3
servers:
- url: /
paths:
  /callback/{processId}/deprovision:
    post:
      tags:
      - HTTP Provisioner Webhook
      operationId: callDeprovisionWebhook
      parameters:
      - name: processId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeprovisionedResource"
      responses:
        default:
          description: default response
          content:
            application/json: {}
      deprecated: true
  /callback/{processId}/provision:
    post:
      tags:
      - HTTP Provisioner Webhook
      operationId: callProvisionWebhook
      parameters:
      - name: processId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvisionerWebhookRequest"
      responses:
        default:
          description: default response
          content:
            application/json: {}
      deprecated: true
  /v3/assets:
    put:
      tags:
      - Asset V3
      description: "Updates an asset with the given ID if it exists. If the asset\
        \ is not found, no further action is taken. DANGER ZONE: Note that updating\
        \ assets can have unexpected results, especially for contract offers that\
        \ have been sent out or are ongoing in contract negotiations."
      operationId: updateAssetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInput"
      responses:
        "204":
          description: Asset was updated successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: "Asset could not be updated, because it does not exist."
    post:
      tags:
      - Asset V3
      description: Creates a new asset together with a data address
      operationId: createAssetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInput"
      responses:
        "200":
          description: Asset was created successfully. Returns the asset Id and created
            timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create asset, because an asset with that ID already\
            \ exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/assets/request:
    post:
      tags:
      - Asset V3
      description: Request all assets according to a particular query
      operationId: requestAssetsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The assets matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssetOutput"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/assets/{id}:
    get:
      tags:
      - Asset V3
      description: Gets an asset with the given ID
      operationId: getAssetV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The asset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetOutput"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An asset with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Asset V3
      description: "Removes an asset with the given ID if possible. Deleting an asset\
        \ is only possible if that asset is not yet referenced by a contract agreement,\
        \ in which case an error is returned. DANGER ZONE: Note that deleting assets\
        \ can have unexpected results, especially for contract offers that have been\
        \ sent out or ongoing or contract negotiations."
      operationId: removeAssetV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Asset was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An asset with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "The asset cannot be deleted, because it is referenced by a\
            \ contract agreement"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/catalog/dataset/request:
    post:
      tags:
      - Catalog V3
      operationId: getDatasetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatasetRequest"
      responses:
        default:
          description: Gets single dataset from a connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
  /v3/catalog/request:
    post:
      tags:
      - Catalog V3
      operationId: requestCatalogV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CatalogRequest"
      responses:
        default:
          description: Gets contract offers (=catalog) of a single connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
  /v3/contractagreements/request:
    post:
      tags:
      - Contract Agreement V3
      description: Gets all contract agreements according to a particular query
      operationId: queryAgreementsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The contract agreements matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractAgreement"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractagreements/{id}:
    get:
      tags:
      - Contract Agreement V3
      description: Gets an contract agreement with the given ID
      operationId: getAgreementByIdV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract agreement
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract agreement with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractagreements/{id}/negotiation:
    get:
      tags:
      - Contract Agreement V3
      description: Gets a contract negotiation with the given contract agreement ID
      operationId: getNegotiationByAgreementIdV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract negotiation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractNegotiation"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract agreement with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractdefinitions:
    put:
      tags:
      - Contract Definition V3
      description: Updated a contract definition with the given ID. The supplied JSON
        structure must be a valid JSON-LD object
      operationId: updateContractDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "204":
          description: Contract definition was updated successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    post:
      tags:
      - Contract Definition V3
      description: Creates a new contract definition
      operationId: createContractDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "200":
          description: contract definition was created successfully. Returns the Contract
            Definition Id and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create contract definition, because a contract definition\
            \ with that ID already exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractdefinitions/request:
    post:
      tags:
      - Contract Definition V3
      description: Returns all contract definitions according to a query
      operationId: queryContractDefinitionsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The contract definitions matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractDefinitionOutput"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractdefinitions/{id}:
    get:
      tags:
      - Contract Definition V3
      description: Gets an contract definition with the given ID
      operationId: getContractDefinitionV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractDefinitionOutput"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract agreement with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Contract Definition V3
      description: "Removes a contract definition with the given ID if possible. DANGER\
        \ ZONE: Note that deleting contract definitions can have unexpected results,\
        \ especially for contract offers that have been sent out or ongoing or contract\
        \ negotiations."
      operationId: deleteContractDefinitionV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Contract definition was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractnegotiations:
    post:
      tags:
      - Contract Negotiation V3
      description: "Initiates a contract negotiation for a given offer and with the\
        \ given counter part. Please note that successfully invoking this endpoint\
        \ only means that the negotiation was initiated. Clients must poll the /{id}/state\
        \ endpoint to track the state"
      operationId: initiateContractNegotiationV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractRequest"
      responses:
        "200":
          description: The negotiation was successfully initiated. Returns the contract
            negotiation ID and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          links:
            poll-state:
              operationId: getNegotiationStateV3
              parameters:
                id: $response.body#/id
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractnegotiations/request:
    post:
      tags:
      - Contract Negotiation V3
      description: Returns all contract negotiations according to a query
      operationId: queryNegotiationsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The contract negotiations that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractNegotiation"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractnegotiations/{id}:
    get:
      tags:
      - Contract Negotiation V3
      description: Gets a contract negotiation with the given ID
      operationId: getNegotiationV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract negotiation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractNegotiation"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Contract Negotiation V3
      description: Deletes the contract negotiation with the given ID. Only terminated
        negotiations without agreement will be deleted
      operationId: deleteNegotiationV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: ContractNegotiation is deleted
          links:
            poll-state:
              operationId: getNegotiationStateV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: The given contract negotiation cannot be deleted due to a wrong
            state or has existing contract agreement
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractnegotiations/{id}/agreement:
    get:
      tags:
      - Contract Negotiation V3
      description: Gets a contract agreement for a contract negotiation with the given
        ID
      operationId: getAgreementForNegotiationV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "The contract agreement that is attached to the negotiation,\
            \ or null"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractnegotiations/{id}/state:
    get:
      tags:
      - Contract Negotiation V3
      description: Gets the state of a contract negotiation with the given ID
      operationId: getNegotiationStateV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract negotiation's state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NegotiationState"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/contractnegotiations/{id}/terminate:
    post:
      tags:
      - Contract Negotiation V3
      description: Terminates the contract negotiation.
      operationId: terminateNegotiationV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateNegotiationSchema"
      responses:
        "200":
          description: ContractNegotiation is terminating
          links:
            poll-state:
              operationId: getNegotiationStateV3
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/dataplanes:
    get:
      tags:
      - Dataplane Selector V3
      description: Returns a list of all currently registered data plane instances
      operationId: getAllDataPlaneInstancesV3
      responses:
        "200":
          description: A (potentially empty) list of currently registered data plane
            instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataPlaneInstanceSchemaV3"
  /v3/edrs/request:
    post:
      tags:
      - EDR Cache V3
      description: Request all Edr entries according to a particular query
      operationId: requestEdrEntriesV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The edr entries matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EndpointDataReferenceEntry"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/edrs/{transferProcessId}:
    delete:
      tags:
      - EDR Cache V3
      description: Removes an EDR entry given the transfer process ID
      operationId: removeEdrEntryV3
      parameters:
      - name: transferProcessId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: EDR entry was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An EDR entry with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/edrs/{transferProcessId}/dataaddress:
    get:
      tags:
      - EDR Cache V3
      description: Gets the EDR data address with the given transfer process ID
      operationId: getEdrEntryDataAddressV3
      parameters:
      - name: transferProcessId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The data address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataAddress"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An EDR data address with the given transfer process ID does
            not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/policydefinitions:
    post:
      tags:
      - Policy Definition v3
      description: Creates a new policy definition
      operationId: createPolicyDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "200":
          description: policy definition was created successfully. Returns the Policy
            Definition Id and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create policy definition, because a contract definition\
            \ with that ID already exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/policydefinitions/request:
    post:
      tags:
      - Policy Definition v3
      description: Returns all policy definitions according to a query
      operationId: queryPolicyDefinitionsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The policy definitions matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyDefinitionOutput"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/policydefinitions/{id}:
    get:
      tags:
      - Policy Definition v3
      description: Gets a policy definition with the given ID
      operationId: getPolicyDefinitionV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The  policy definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyDefinitionOutput"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An  policy definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    put:
      tags:
      - Policy Definition v3
      description: "Updates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: updatePolicyDefinitionV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "204":
          description: policy definition was updated successfully.
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: "policy definition could not be updated, because it does not\
            \ exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Policy Definition v3
      description: "Removes a policy definition with the given ID if possible. Deleting\
        \ a policy definition is only possible if that policy definition is not yet\
        \ referenced by a contract definition, in which case an error is returned.\
        \ DANGER ZONE: Note that deleting policy definitions can have unexpected results,\
        \ do this at your own risk!"
      operationId: deletePolicyDefinitionV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Policy definition was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An policy definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "The policy definition cannot be deleted, because it is referenced\
            \ by a contract definition"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/policydefinitions/{id}/evaluationplan:
    post:
      tags:
      - Policy Definition v3
      description: "Creates an execution plane for an existing Policy, If the Policy\
        \ is not found, an error is reported"
      operationId: createExecutionPlaneV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyEvaluationPlanRequestSchema"
      responses:
        "200":
          description: Returns the evaluation plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyEvaluationPlanSchema"
        "404":
          description: "An evaluation plan could not be created, because the policy\
            \ definition does not exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
  /v3/policydefinitions/{id}/validate:
    post:
      tags:
      - Policy Definition v3
      description: "Validates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: validatePolicyDefinitionV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyValidationResultSchema"
        "404":
          description: "policy definition could not be validated, because it does\
            \ not exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
  /v3/secrets:
    put:
      tags:
      - Secret V3
      description: "Updates a secret with the given ID if it exists. If the secret\
        \ is not found, no further action is taken. "
      operationId: updateSecretV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretInput"
      responses:
        "204":
          description: Secret was updated successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: "Secret could not be updated, because it does not exist."
    post:
      tags:
      - Secret V3
      description: Creates a new secret.
      operationId: createSecretV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretInput"
      responses:
        "200":
          description: Secret was created successfully. Returns the secret Id and
            created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create secret, because a secret with that ID already\
            \ exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/secrets/{id}:
    get:
      tags:
      - Secret V3
      description: Gets a secret with the given ID
      operationId: getSecretV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The secret
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretOutput"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A secret with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Secret V3
      description: Removes a secret with the given ID if possible.
      operationId: removeSecretV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Secret was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A secret with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses:
    post:
      tags:
      - Transfer Process V3
      description: "Initiates a data transfer with the given parameters. Due to the\
        \ asynchronous nature of transfers, a successful response only indicates that\
        \ the request was successfully received. This may take a long time, so clients\
        \ must poll the /{id}/state endpoint to track the state."
      operationId: initiateTransferProcessV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "200":
          description: The transfer was successfully initiated. Returns the transfer
            process ID and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          links:
            poll-state:
              operationId: getTransferProcessStateV3
              parameters:
                id: $response.body#/id
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses/request:
    post:
      tags:
      - Transfer Process V3
      description: Returns all transfer process according to a query
      operationId: queryTransferProcessesV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The transfer processes matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransferProcess"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses/{id}:
    get:
      tags:
      - Transfer Process V3
      description: Gets an transfer process with the given ID
      operationId: getTransferProcessV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The transfer process
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferProcess"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses/{id}/deprovision:
    post:
      tags:
      - Transfer Process V3
      description: "Requests the deprovisioning of resources associated with a transfer\
        \ process. Due to the asynchronous nature of transfers, a successful response\
        \ only indicates that the request was successfully received. This may take\
        \ a long time, so clients must poll the /{id}/state endpoint to track the\
        \ state."
      operationId: deprovisionTransferProcessV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request to deprovision the transfer process was successfully
            received
          links:
            poll-state:
              operationId: deprovisionTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses/{id}/resume:
    post:
      tags:
      - Transfer Process V3
      description: "Requests the resumption of a suspended transfer process. Due to\
        \ the asynchronous nature of transfers, a successful response only indicates\
        \ that the request was successfully received. This may take a long time, so\
        \ clients must poll the /{id}/state endpoint to track the state."
      operationId: resumeTransferProcessV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request to resume the transfer process was successfully received
          links:
            poll-state:
              operationId: resumeTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses/{id}/state:
    get:
      tags:
      - Transfer Process V3
      description: Gets the state of a transfer process with the given ID
      operationId: getTransferProcessStateV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The  transfer process's state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferState"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An  transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses/{id}/suspend:
    post:
      tags:
      - Transfer Process V3
      description: "Requests the suspension of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: suspendTransferProcessV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuspendTransfer"
      responses:
        "204":
          description: Request to suspend the transfer process was successfully received
          links:
            poll-state:
              operationId: suspendTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not suspend the transfer process, because it is already\
            \ completed or terminated."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v3/transferprocesses/{id}/terminate:
    post:
      tags:
      - Transfer Process V3
      description: "Requests the termination of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: terminateTransferProcessV3
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateTransfer"
      responses:
        "204":
          description: Request to terminate the transfer process was successfully
            received
          links:
            poll-state:
              operationId: terminateTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not terminate transfer process, because it is already\
            \ completed or terminated."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/assets:
    put:
      tags:
      - Asset v4alpha
      description: "Updates an asset with the given ID if it exists. If the asset\
        \ is not found, no further action is taken. DANGER ZONE: Note that updating\
        \ assets can have unexpected results, especially for contract offers that\
        \ have been sent out or are ongoing in contract negotiations."
      operationId: updateAssetV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset-schema"
      responses:
        "204":
          description: Asset was updated successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: "Asset could not be updated, because it does not exist."
    post:
      tags:
      - Asset v4alpha
      description: Creates a new asset together with a data address
      operationId: createAssetV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset-schema"
      responses:
        "200":
          description: Asset was created successfully. Returns the asset Id and created
            timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/id-response-schema"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create asset, because an asset with that ID already\
            \ exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/assets/request:
    post:
      tags:
      - Asset v4alpha
      description: Request all assets according to a particular query
      operationId: requestAssetsV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query-spec-schema"
      responses:
        "200":
          description: The assets matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/asset-schema"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/assets/{id}:
    get:
      tags:
      - Asset v4alpha
      description: Gets an asset with the given ID
      operationId: getAssetV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The asset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset-schema"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An asset with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Asset v4alpha
      description: "Removes an asset with the given ID if possible. Deleting an asset\
        \ is only possible if that asset is not yet referenced by a contract agreement,\
        \ in which case an error is returned. DANGER ZONE: Note that deleting assets\
        \ can have unexpected results, especially for contract offers that have been\
        \ sent out or ongoing or contract negotiations."
      operationId: removeAssetV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Asset was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An asset with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "The asset cannot be deleted, because it is referenced by a\
            \ contract agreement"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/catalog/dataset/request:
    post:
      tags:
      - Catalog v4alpha
      operationId: getDatasetV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/catalog-request-schema"
      responses:
        default:
          description: Gets single dataset from a connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dataset-schema"
  /v4alpha/catalog/request:
    post:
      tags:
      - Catalog v4alpha
      operationId: requestCatalogV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/catalog-request-schema"
      responses:
        default:
          description: Gets contract offers (=catalog) of a single connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/catalog-schema"
  /v4alpha/contractagreements/request:
    post:
      tags:
      - Contract Agreement v4alpha
      description: Gets all contract agreements according to a particular query
      operationId: queryAgreementsV4Alpha
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The contract agreements matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractAgreement"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractagreements/{id}:
    get:
      tags:
      - Contract Agreement v4alpha
      description: Gets an contract agreement with the given ID
      operationId: getAgreementByIdV4Alpha
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract agreement
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract agreement with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractagreements/{id}/negotiation:
    get:
      tags:
      - Contract Agreement v4alpha
      description: Gets a contract negotiation with the given contract agreement ID
      operationId: getNegotiationByAgreementIdV4Alpha
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract negotiation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractNegotiation"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract agreement with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractdefinitions:
    put:
      tags:
      - Contract Definition v4alpha
      description: Updated a contract definition with the given ID. The supplied JSON
        structure must be a valid JSON-LD object
      operationId: updateContractDefinitionV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contract-definition-schema"
      responses:
        "204":
          description: Contract definition was updated successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    post:
      tags:
      - Contract Definition v4alpha
      description: Creates a new contract definition
      operationId: createContractDefinitionV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contract-definition-schema"
      responses:
        "200":
          description: contract definition was created successfully. Returns the Contract
            Definition Id and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/id-response-schema"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create contract definition, because a contract definition\
            \ with that ID already exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractdefinitions/request:
    post:
      tags:
      - Contract Definition v4alpha
      description: Returns all contract definitions according to a query
      operationId: queryContractDefinitionsV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query-spec-schema"
      responses:
        "200":
          description: The contract definitions matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/contract-definition-schema"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractdefinitions/{id}:
    get:
      tags:
      - Contract Definition v4alpha
      description: Gets an contract definition with the given ID
      operationId: getContractDefinitionV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contract-definition-schema"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract agreement with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Contract Definition v4alpha
      description: "Removes a contract definition with the given ID if possible. DANGER\
        \ ZONE: Note that deleting contract definitions can have unexpected results,\
        \ especially for contract offers that have been sent out or ongoing or contract\
        \ negotiations."
      operationId: deleteContractDefinitionV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Contract definition was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractnegotiations:
    post:
      tags:
      - Contract Negotiation v4alpha
      description: "Initiates a contract negotiation for a given offer and with the\
        \ given counter part. Please note that successfully invoking this endpoint\
        \ only means that the negotiation was initiated. Clients must poll the /{id}/state\
        \ endpoint to track the state"
      operationId: initiateContractNegotiationV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contract-request-schema"
      responses:
        "200":
          description: The negotiation was successfully initiated. Returns the contract
            negotiation ID and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          links:
            poll-state:
              operationId: getNegotiationStateV3
              parameters:
                id: $response.body#/id
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractnegotiations/request:
    post:
      tags:
      - Contract Negotiation v4alpha
      description: Returns all contract negotiations according to a query
      operationId: queryNegotiationsV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query-spec-schema"
      responses:
        "200":
          description: The contract negotiations that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/contract-negotiation-schema"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractnegotiations/{id}:
    get:
      tags:
      - Contract Negotiation v4alpha
      description: Gets a contract negotiation with the given ID
      operationId: getNegotiationV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract negotiation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contract-negotiation-schema"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Contract Negotiation v4alpha
      description: Deletes the contract negotiation with the given ID. Only terminated
        negotiations without agreement will be deleted
      operationId: deleteNegotiationV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: ContractNegotiation is deleted
          links:
            poll-state:
              operationId: getNegotiationStateV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: The given contract negotiation cannot be deleted due to a wrong
            state or has existing contract agreement
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractnegotiations/{id}/agreement:
    get:
      tags:
      - Contract Negotiation v4alpha
      description: Gets a contract agreement for a contract negotiation with the given
        ID
      operationId: getAgreementForNegotiationV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "The contract agreement that is attached to the negotiation,\
            \ or null"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractAgreement"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractnegotiations/{id}/state:
    get:
      tags:
      - Contract Negotiation v4alpha
      description: Gets the state of a contract negotiation with the given ID
      operationId: getNegotiationStateV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The contract negotiation's state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NegotiationState_1"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/contractnegotiations/{id}/terminate:
    post:
      tags:
      - Contract Negotiation v4alpha
      description: Terminates the contract negotiation.
      operationId: terminateNegotiationV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contract-terminate-schema"
      responses:
        "200":
          description: ContractNegotiation is terminating
          links:
            poll-state:
              operationId: getNegotiationStateV3
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A contract negotiation with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/dataplanes:
    get:
      tags:
      - Dataplane Selector v4alpha
      description: Returns a list of all currently registered data plane instances
      operationId: getAllDataPlaneInstancesV4
      responses:
        "200":
          description: A (potentially empty) list of currently registered data plane
            instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataPlaneInstanceSchemaV4"
  /v4alpha/edrs/request:
    post:
      tags:
      - EDR Cache v4alpha
      description: Request all Edr entries according to a particular query
      operationId: requestEdrEntriesV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query-spec-schema"
      responses:
        "200":
          description: The edr entries matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/edr-entry-schema"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/edrs/{transferProcessId}:
    delete:
      tags:
      - EDR Cache v4alpha
      description: Removes an EDR entry given the transfer process ID
      operationId: removeEdrEntryV4
      parameters:
      - name: transferProcessId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: EDR entry was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An EDR entry with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/edrs/{transferProcessId}/dataaddress:
    get:
      tags:
      - EDR Cache v4alpha
      description: Gets the EDR data address with the given transfer process ID
      operationId: getEdrEntryDataAddressV4
      parameters:
      - name: transferProcessId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The data address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataAddressRoot"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An EDR data address with the given transfer process ID does
            not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/policydefinitions:
    post:
      tags:
      - Policy Definition v4alpha
      description: Creates a new policy definition
      operationId: createPolicyDefinitionV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/policy-definition-schema"
      responses:
        "200":
          description: policy definition was created successfully. Returns the Policy
            Definition Id and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/id-response-schema"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create policy definition, because a contract definition\
            \ with that ID already exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/policydefinitions/request:
    post:
      tags:
      - Policy Definition v4alpha
      description: Returns all policy definitions according to a query
      operationId: queryPolicyDefinitionsV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query-spec-schema"
      responses:
        "200":
          description: The policy definitions matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/policy-definition-schema"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/policydefinitions/{id}:
    get:
      tags:
      - Policy Definition v4alpha
      description: Gets a policy definition with the given ID
      operationId: getPolicyDefinitionV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The  policy definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy-definition-schema"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An  policy definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    put:
      tags:
      - Policy Definition v4alpha
      description: "Updates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: updatePolicyDefinitionV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/policy-definition-schema"
      responses:
        "204":
          description: policy definition was updated successfully.
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: "policy definition could not be updated, because it does not\
            \ exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Policy Definition v4alpha
      description: "Removes a policy definition with the given ID if possible. Deleting\
        \ a policy definition is only possible if that policy definition is not yet\
        \ referenced by a contract definition, in which case an error is returned.\
        \ DANGER ZONE: Note that deleting policy definitions can have unexpected results,\
        \ do this at your own risk!"
      operationId: deletePolicyDefinitionV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Policy definition was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An policy definition with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "The policy definition cannot be deleted, because it is referenced\
            \ by a contract definition"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/policydefinitions/{id}/evaluationplan:
    post:
      tags:
      - Policy Definition v4alpha
      description: "Creates an execution plane for an existing Policy, If the Policy\
        \ is not found, an error is reported"
      operationId: createExecutionPlanV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/policy-evaluation-plan-request-schema"
      responses:
        "200":
          description: Returns the evaluation plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy-evaluation-plan-schema"
        "404":
          description: "An evaluation plan could not be created, because the policy\
            \ definition does not exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/policydefinitions/{id}/validate:
    post:
      tags:
      - Policy Definition v4alpha
      description: "Validates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: validatePolicyDefinitionV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy-validation-result-schema"
        "404":
          description: "policy definition could not be validated, because it does\
            \ not exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/protocol-versions/request:
    post:
      tags:
      - Protocol Version v4alpha
      operationId: requestProtocolVersionV4alpha
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CatalogRequest"
      responses:
        default:
          description: Gets supported protocol versions of a single connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProtocolVersion"
  /v4alpha/secrets:
    put:
      tags:
      - Secret v4alpha
      description: "Updates a secret with the given ID if it exists. If the secret\
        \ is not found, no further action is taken. "
      operationId: updateSecretV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/secret-schema"
      responses:
        "204":
          description: Secret was updated successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: "Secret could not be updated, because it does not exist."
    post:
      tags:
      - Secret v4alpha
      description: Creates a new secret.
      operationId: createSecretV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/secret-schema"
      responses:
        "200":
          description: Secret was created successfully. Returns the secret Id and
            created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/id-response-schema"
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not create secret, because a secret with that ID already\
            \ exists"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/secrets/{id}:
    get:
      tags:
      - Secret v4alpha
      description: Gets a secret with the given ID
      operationId: getSecretV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The secret
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/secret-schema"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A secret with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
    delete:
      tags:
      - Secret v4alpha
      description: Removes a secret with the given ID if possible.
      operationId: removeSecretV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Secret was deleted successfully
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A secret with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses:
    post:
      tags:
      - Transfer Process v4alpha
      description: "Initiates a data transfer with the given parameters. Due to the\
        \ asynchronous nature of transfers, a successful response only indicates that\
        \ the request was successfully received. This may take a long time, so clients\
        \ must poll the /{id}/state endpoint to track the state."
      operationId: initiateTransferProcessV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transfer-request-schema"
      responses:
        "200":
          description: The transfer was successfully initiated. Returns the transfer
            process ID and created timestamp
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/id-response-schema"
          links:
            poll-state:
              operationId: getTransferProcessStateV3
              parameters:
                id: $response.body#/id
        "400":
          description: Request body was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses/request:
    post:
      tags:
      - Transfer Process v4alpha
      description: Returns all transfer process according to a query
      operationId: queryTransferProcessesV4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          description: The transfer processes matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/transfer-process-schema"
        "400":
          description: Request was malformed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses/{id}:
    get:
      tags:
      - Transfer Process v4alpha
      description: Gets an transfer process with the given ID
      operationId: getTransferProcessV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The transfer process
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transfer-process-schema"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses/{id}/deprovision:
    post:
      tags:
      - Transfer Process v4alpha
      description: "Requests the deprovisioning of resources associated with a transfer\
        \ process. Due to the asynchronous nature of transfers, a successful response\
        \ only indicates that the request was successfully received. This may take\
        \ a long time, so clients must poll the /{id}/state endpoint to track the\
        \ state."
      operationId: deprovisionTransferProcessV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request to deprovision the transfer process was successfully
            received
          links:
            poll-state:
              operationId: deprovisionTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses/{id}/resume:
    post:
      tags:
      - Transfer Process v4alpha
      description: "Requests the resumption of a suspended transfer process. Due to\
        \ the asynchronous nature of transfers, a successful response only indicates\
        \ that the request was successfully received. This may take a long time, so\
        \ clients must poll the /{id}/state endpoint to track the state."
      operationId: resumeTransferProcessV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request to resume the transfer process was successfully received
          links:
            poll-state:
              operationId: resumeTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses/{id}/state:
    get:
      tags:
      - Transfer Process v4alpha
      description: Gets the state of a transfer process with the given ID
      operationId: getTransferProcessStateV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The  transfer process's state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferState_1"
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: An  transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses/{id}/suspend:
    post:
      tags:
      - Transfer Process v4alpha
      description: "Requests the suspension of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: suspendTransferProcessV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transfer-suspend-schema"
      responses:
        "204":
          description: Request to suspend the transfer process was successfully received
          links:
            poll-state:
              operationId: suspendTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not suspend the transfer process, because it is already\
            \ completed or terminated."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /v4alpha/transferprocesses/{id}/terminate:
    post:
      tags:
      - Transfer Process v4alpha
      description: "Requests the termination of a transfer process. Due to the asynchronous\
        \ nature of transfers, a successful response only indicates that the request\
        \ was successfully received. This may take a long time, so clients must poll\
        \ the /{id}/state endpoint to track the state."
      operationId: terminateTransferProcessV4
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transfer-terminate-schema"
      responses:
        "204":
          description: Request to terminate the transfer process was successfully
            received
          links:
            poll-state:
              operationId: terminateTransferProcessV3
        "400":
          description: "Request was malformed, e.g. id was null"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "404":
          description: A transfer process with the given ID does not exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
        "409":
          description: "Could not terminate transfer process, because it is already\
            \ completed or terminated."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
  /{flowId}/{resourceId}/deprovision:
    post:
      operationId: deprovision
      parameters:
      - name: flowId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: resourceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /{flowId}/{resourceId}/provision:
    post:
      operationId: provision
      parameters:
      - name: flowId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: resourceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/ProvisionHttpResponse"
      responses:
        default:
          description: default response
          content:
            '*/*': {}
components:
  schemas:
    AbstractDataset:
      type: object
      allOf:
      - $ref: "#/components/schemas/Resource"
      - properties:
          distribution:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/Distribution"
    Action:
      type: string
    AndConstraintStep:
      required:
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/MultiplicityConstraintStep"
      - properties:
          '@type':
            type: string
    ApiErrorDetail:
      type: object
      properties:
        invalidValue:
          type: string
        message:
          type: string
        path:
          type: string
        type:
          type: string
      example:
        message: error message
        type: ErrorType
        path: object.error.path
        invalidValue: this value is not valid
    Asset:
      required:
      - '@context'
      - '@type'
      - dataAddress
      - properties
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        properties:
          type: object
        privateProperties:
          type: object
        dataAddress:
          $ref: "#/components/schemas/data-address-schema"
    AssetInput:
      required:
      - '@context'
      - dataAddress
      - properties
      type: object
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Asset
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          $ref: "#/components/schemas/Properties"
        properties:
          $ref: "#/components/schemas/Properties"
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': asset-id
        properties:
          key: value
        privateProperties:
          privateKey: privateValue
        dataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
    AssetOutput:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Asset
        createdAt:
          type: integer
          format: int64
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          $ref: "#/components/schemas/Properties"
        properties:
          $ref: "#/components/schemas/Properties"
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': asset-id
        properties:
          key: value
        privateProperties:
          privateKey: privateValue
        dataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
        createdAt: 1688465655
    AtomicConstraint:
      required:
      - leftOperand
      - operator
      - rightOperand
      type: object
      properties:
        rightOperand:
          $ref: "#/components/schemas/RightOperand"
        leftOperand:
          $ref: "#/components/schemas/LeftOperand"
        operator:
          $ref: "#/components/schemas/Operator"
    AtomicConstraintStep:
      required:
      - '@type'
      type: object
      properties:
        '@type':
          type: string
        isFiltered:
          type: boolean
        filteringReasons:
          type: array
          items:
            type: string
        functionName:
          type: string
        functionParams:
          type: array
          items:
            type: string
    CallbackAddress:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/CallbackAddress
        authCodeId:
          type: string
        authKey:
          type: string
        events:
          uniqueItems: true
          type: array
          items:
            type: string
        transactional:
          type: boolean
        uri:
          type: string
    CallbackAddress_1:
      required:
      - '@type'
      - events
      - transactional
      - uri
      type: object
      properties:
        '@type':
          type: string
        transactional:
          type: boolean
        uri:
          type: string
        events:
          type: array
          items:
            type: string
        authKey:
          type: string
        authCodeId:
          type: string
    Catalog:
      type: object
      description: DCAT catalog
      example:
        '@id': 7df65569-8c59-4013-b1c0-fa14f6641bf2
        '@type': dcat:Catalog
        dcat:dataset:
          '@id': bcca61be-e82e-4da6-bfec-9716a56cef35
          '@type': dcat:Dataset
          odrl:hasPolicy:
            '@id': OGU0ZTMzMGMtODQ2ZS00ZWMxLThmOGQtNWQxNWM0NmI2NmY4:YmNjYTYxYmUtZTgyZS00ZGE2LWJmZWMtOTcxNmE1NmNlZjM1:NDY2ZTZhMmEtNjQ1Yy00ZGQ0LWFlZDktMjdjNGJkZTU4MDNj
            '@type': odrl:Set
            odrl:permission:
              odrl:target: bcca61be-e82e-4da6-bfec-9716a56cef35
              odrl:action:
                odrl:type: http://www.w3.org/ns/odrl/2/use
              odrl:constraint:
                odrl:and:
                - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                  odrl:operator:
                    '@id': odrl:gteq
                  odrl:rightOperand: 2023-07-07T07:19:58.585601395Z
                - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                  odrl:operator:
                    '@id': odrl:lteq
                  odrl:rightOperand: 2023-07-12T07:19:58.585601395Z
            odrl:prohibition: []
            odrl:obligation: []
          dcat:distribution:
          - '@type': dcat:Distribution
            dct:format:
              '@id': HttpData
            dcat:accessService: 5e839777-d93e-4785-8972-1005f51cf367
          description: description
          id: bcca61be-e82e-4da6-bfec-9716a56cef35
        dcat:service:
          '@id': 5e839777-d93e-4785-8972-1005f51cf367
          '@type': dcat:DataService
          dct:terms: connector
          dcat:endpointURL: http://localhost:16806/protocol
        dspace:participantId: urn:connector:provider
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
          dct: http://purl.org/dc/terms/
          edc: https://w3id.org/edc/v0.0.1/ns/
          dcat: http://www.w3.org/ns/dcat#
          odrl: http://www.w3.org/ns/odrl/2/
          dspace: https://w3id.org/dspace/v0.8/
    CatalogRequest:
      required:
      - '@context'
      - counterPartyAddress
      - protocol
      type: object
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/CatalogRequest
        additionalScopes:
          type: array
          items:
            type: string
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        protocol:
          type: string
        querySpec:
          $ref: "#/components/schemas/QuerySpec"
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': CatalogRequest
        counterPartyAddress: http://provider-address
        counterPartyId: providerId
        protocol: dataspace-protocol-http
        additionalScopes:
        - org.eclipse.edc.vc.type:SomeCredential:read
        - org.eclipse.edc.vc.type:AnotherCredential:write
        querySpec:
          offset: 0
          limit: 50
          sortOrder: DESC
          sortField: fieldName
          filterExpression: []
    CatalogRequest_1:
      required:
      - '@context'
      - '@type'
      - counterPartyAddress
      - counterPartyId
      - protocol
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        protocol:
          type: string
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        additionalScopes:
          type: array
          items:
            type: string
        querySpec:
          $ref: "#/components/schemas/QuerySpec_1"
    Catalog_1:
      required:
      - '@id'
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDataset"
      - properties:
          '@type':
            type: string
          dataset:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/Dataset_1"
          catalog:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/Catalog_1"
          service:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/DataService"
      anyOf:
      - not:
          required:
          - hasPolicy
    Constraint:
      type: object
      oneOf:
      - $ref: "#/components/schemas/LogicalConstraint"
      - $ref: "#/components/schemas/AtomicConstraint"
    ConstraintStep:
      oneOf:
      - $ref: "#/components/schemas/AndConstraintStep"
      - $ref: "#/components/schemas/OrConstraintStep"
      - $ref: "#/components/schemas/XoneConstraintStep"
      - $ref: "#/components/schemas/AtomicConstraintStep"
    ContextSchema:
      type: array
      items:
        type: array
        items:
          type: string
    ContractAgreement:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractAgreement
        assetId:
          type: string
        consumerId:
          type: string
        contractSigningDate:
          type: integer
          format: int64
        policy:
          $ref: "#/components/schemas/Policy"
        providerId:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/ContractAgreement
        '@id': negotiation-id
        providerId: provider-id
        consumerId: consumer-id
        assetId: asset-id
        contractSigningDate: 1688465655
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          '@id': offer-id
          permission:
          - target: asset-id
            action: display
    ContractDefinition:
      required:
      - '@context'
      - '@type'
      - accessPolicyId
      - contractPolicyId
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        accessPolicyId:
          type: string
        contractPolicyId:
          type: string
        privateProperties:
          type: object
        assetsSelector:
          type: array
          items:
            $ref: "#/components/schemas/Criterion_1"
    ContractDefinitionInput:
      required:
      - '@context'
      - accessPolicyId
      - assetsSelector
      - contractPolicyId
      type: object
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractDefinition
        accessPolicyId:
          type: string
        assetsSelector:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
        contractPolicyId:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        accessPolicyId: asset-policy-id
        contractPolicyId: contract-policy-id
        assetsSelector: []
    ContractDefinitionOutput:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractDefinition
        accessPolicyId:
          type: string
        assetsSelector:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
        contractPolicyId:
          type: string
        createdAt:
          type: integer
          format: int64
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        accessPolicyId: asset-policy-id
        contractPolicyId: contract-policy-id
        assetsSelector: []
        createdAt: 1688465655
    ContractNegotiation:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractNegotiation
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        contractAgreementId:
          type: string
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        errorDetail:
          type: string
        protocol:
          type: string
        state:
          type: string
        type:
          type: string
          enum:
          - CONSUMER
          - PROVIDER
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/ContractNegotiation
        '@id': negotiation-id
        type: PROVIDER
        protocol: dataspace-protocol-http
        counterPartyId: counter-party-id
        counterPartyAddress: http://counter/party/address
        state: VERIFIED
        contractAgreementId: contract:agreement:id
        errorDetail: eventual-error-detail
        createdAt: 1688465655
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
    ContractNegotiation_1:
      required:
      - '@context'
      - '@id'
      - '@type'
      - counterPartyAddress
      - counterPartyId
      - createdAt
      - protocol
      - state
      - type
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        type:
          type: string
          enum:
          - CONSUMER
          - PROVIDER
        state:
          type: string
        stateTimestamp:
          type: integer
        protocol:
          type: string
        createdAt:
          type: integer
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/callback-address-schema"
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        errorDetail:
          type: string
        correlationId:
          type: string
        assetId:
          type: string
        contractAgreementId:
          type: string
    ContractOffer:
      required:
      - assigner
      - target
      type: object
      allOf:
      - $ref: "#/components/schemas/MessageOffer"
      - properties:
          assigner:
            type: string
    ContractRequest:
      required:
      - '@context'
      - counterPartyAddress
      - policy
      - protocol
      type: object
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/ContractRequest
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        counterPartyAddress:
          type: string
        policy:
          $ref: "#/components/schemas/Offer"
        protocol:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/ContractRequest
        counterPartyAddress: http://provider-address
        protocol: dataspace-protocol-http
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': odrl:Offer
          '@id': offer-id
          assigner: providerId
          permission: []
          prohibition: []
          obligation: []
          target: assetId
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
    ContractRequest_1:
      required:
      - '@context'
      - '@type'
      - counterPartyAddress
      - policy
      - protocol
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        counterPartyAddress:
          type: string
        protocol:
          type: string
        policy:
          $ref: "#/components/schemas/contract-offer-schema"
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/callback-address-schema"
    Criterion:
      required:
      - operandLeft
      - operandRight
      - operator
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Criterion
        operandLeft:
          type: object
        operandRight:
          type: object
        operator:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': Criterion
        operandLeft: fieldName
        operator: =
        operandRight: some value
    Criterion_1:
      required:
      - '@type'
      - operandLeft
      - operandRight
      - operator
      type: object
      properties:
        '@type':
          type: string
        operandLeft:
          type: string
        operandRight: {}
        operator:
          type: string
    DataAddress:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/DataAddress
        type:
          type: string
    DataAddressRoot:
      required:
      - '@context'
      - '@type'
      type: object
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/context-schema"
      - $ref: "#/components/schemas/DataAddress_1"
    DataAddress_1:
      required:
      - '@type'
      - type
      type: object
      properties:
        '@type':
          type: string
        type:
          type: string
    DataPlaneInstanceSchemaV3:
      required:
      - '@context'
      - allowedDestTypes
      - allowedSourceTypes
      - url
      type: object
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/DataPlaneInstance
        allowedDestTypes:
          uniqueItems: true
          type: array
          deprecated: true
          items:
            type: string
            deprecated: true
        allowedSourceTypes:
          uniqueItems: true
          type: array
          items:
            type: string
        lastActive:
          type: integer
          format: int64
        state:
          type: string
        stateTimestamp:
          type: integer
          format: int64
        turnCount:
          type: integer
          format: int32
          deprecated: true
        url:
          type: string
          format: url
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': your-dataplane-id
        url: http://somewhere.com:1234/api/v1
        allowedSourceTypes:
        - source-type1
        - source-type2
        allowedDestTypes:
        - your-dest-type
        allowedTransferTypes:
        - transfer-type
        state: AVAILABLE
        stateTimestamp: 1688465655
    DataPlaneInstanceSchemaV4:
      required:
      - '@context'
      - allowedSourceTypes
      - url
      type: object
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/DataPlaneInstance
        allowedSourceTypes:
          uniqueItems: true
          type: array
          items:
            type: string
        lastActive:
          type: integer
          format: int64
        state:
          type: string
        stateTimestamp:
          type: integer
          format: int64
        url:
          type: string
          format: url
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': your-dataplane-id
        url: http://somewhere.com:1234/api/v1
        allowedSourceTypes:
        - source-type1
        - source-type2
        allowedTransferTypes:
        - transfer-type
        state: AVAILABLE
        stateTimestamp: 1688465655
    DataService:
      type: object
      allOf:
      - $ref: "#/components/schemas/Resource"
      - required:
        - '@type'
        - endpointURL
        properties:
          '@type':
            type: string
          endpointURL:
            type: string
          servesDataset:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/Dataset_1"
    Dataset:
      type: object
      description: DCAT dataset
      example:
        '@id': bcca61be-e82e-4da6-bfec-9716a56cef35
        '@type': dcat:Dataset
        odrl:hasPolicy:
          '@id': OGU0ZTMzMGMtODQ2ZS00ZWMxLThmOGQtNWQxNWM0NmI2NmY4:YmNjYTYxYmUtZTgyZS00ZGE2LWJmZWMtOTcxNmE1NmNlZjM1:NDY2ZTZhMmEtNjQ1Yy00ZGQ0LWFlZDktMjdjNGJkZTU4MDNj
          '@type': odrl:Set
          odrl:permission:
            odrl:target: bcca61be-e82e-4da6-bfec-9716a56cef35
            odrl:action:
              odrl:type: http://www.w3.org/ns/odrl/2/use
            odrl:constraint:
              odrl:and:
              - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                odrl:operator:
                  '@id': odrl:gteq
                odrl:rightOperand: 2023-07-07T07:19:58.585601395Z
              - odrl:leftOperand: https://w3id.org/edc/v0.0.1/ns/inForceDate
                odrl:operator:
                  '@id': odrl:lteq
                odrl:rightOperand: 2023-07-12T07:19:58.585601395Z
          odrl:prohibition: []
          odrl:obligation: []
          odrl:target: bcca61be-e82e-4da6-bfec-9716a56cef35
        dcat:distribution:
        - '@type': dcat:Distribution
          dct:format:
            '@id': HttpData
          dcat:accessService: 5e839777-d93e-4785-8972-1005f51cf367
        description: description
        id: bcca61be-e82e-4da6-bfec-9716a56cef35
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
          dct: http://purl.org/dc/terms/
          edc: https://w3id.org/edc/v0.0.1/ns/
          dcat: http://www.w3.org/ns/dcat#
          odrl: http://www.w3.org/ns/odrl/2/
          dspace: https://w3id.org/dspace/v0.8/
    DatasetRequest:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/CatalogRequest
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        protocol:
          type: string
        querySpec:
          $ref: "#/components/schemas/QuerySpec"
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': DatasetRequest
        '@id': dataset-id
        counterPartyAddress: http://counter-party-address
        counterPartyId: counter-party-id
        protocol: dataspace-protocol-http
    Dataset_1:
      required:
      - distribution
      - hasPolicy
      type: object
      properties:
        hasPolicy:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Offer"
      allOf:
      - $ref: "#/components/schemas/AbstractDataset"
    DeprovisionedResource:
      type: object
      properties:
        error:
          type: boolean
        errorMessage:
          type: string
        inProcess:
          type: boolean
        provisionedResourceId:
          type: string
    Distribution:
      required:
      - accessService
      - format
      type: object
      properties:
        hasPolicy:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Offer"
        accessService:
          oneOf:
          - type: string
          - $ref: "#/components/schemas/DataService"
        format:
          type: string
    Duty:
      type: object
      allOf:
      - required:
        - action
        properties:
          action:
            $ref: "#/components/schemas/Action"
          constraint:
            type: array
            items:
              $ref: "#/components/schemas/Constraint"
    DutyStep:
      required:
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/RuleStep"
      - properties:
          '@type':
            type: string
    EndpointDataReferenceEntry:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/EndpointDataReferenceEntry
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': transfer-process-id
        transferProcessId: transfer-process-id
        agreementId: agreement-id
        contractNegotiationId: contract-negotiation-id
        assetId: asset-id
        providerId: provider-id
        createdAt: 1688465655
    EndpointDataReferenceEntry_1:
      required:
      - '@context'
      - '@type'
      - agreementId
      - assetId
      - contractNegotiationId
      - createdAt
      - providerId
      - transferProcessId
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        assetId:
          type: string
        agreementId:
          type: string
        contractNegotiationId:
          type: string
        transferProcessId:
          type: string
        providerId:
          type: string
        createdAt:
          type: integer
    IdResponse:
      type: object
      properties:
        '@id':
          type: string
        createdAt:
          type: integer
          format: int64
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': id-value
        createdAt: 1688465655
    IdResponse_1:
      required:
      - '@context'
      - '@id'
      - '@type'
      - createdAt
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        createdAt:
          type: number
    JsonArray:
      type: array
      properties:
        empty:
          type: boolean
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
      items:
        $ref: "#/components/schemas/JsonValue"
    JsonObject:
      type: object
      properties:
        empty:
          type: boolean
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
      additionalProperties:
        $ref: "#/components/schemas/JsonValue"
    JsonValue:
      type: object
      properties:
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - "TRUE"
          - "FALSE"
          - "NULL"
    LeftOperand:
      type: string
    LogicalConstraint:
      type: object
      properties:
        and:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
        andSequence:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
        or:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
        xone:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
      oneOf:
      - required:
        - and
      - required:
        - andSequence
      - required:
        - or
      - required:
        - xone
    MessageOffer:
      required:
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/PolicyClass"
      - properties:
          '@type':
            type: string
          target:
            type: string
      - anyOf:
        - required:
          - permission
        - required:
          - prohibition
    MultiplicityConstraintStep:
      required:
      - constraintSteps
      type: object
      properties:
        constraintSteps:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintStep"
    NegotiationState:
      type: object
      properties:
        state:
          type: string
    NegotiationState_1:
      required:
      - '@context'
      - '@type'
      - state
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        state:
          type: string
    Offer:
      type: object
      not:
        required:
        - target
      allOf:
      - $ref: "#/components/schemas/PolicyClass"
      - properties:
          '@type':
            type: string
      - anyOf:
        - required:
          - permission
        - required:
          - prohibition
    Operator:
      type: string
      enum:
      - eq
      - gt
      - gteq
      - lteq
      - hasPart
      - isA
      - isAllOf
      - isAnyOf
      - isNoneOf
      - isPartOf
      - lt
      - term-lteq
      - neq
    OrConstraintStep:
      required:
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/MultiplicityConstraintStep"
      - properties:
          '@type':
            type: string
    Permission:
      type: object
      allOf:
      - $ref: "#/components/schemas/Rule"
    PermissionStep:
      required:
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/RuleStep"
      - properties:
          '@type':
            type: string
          dutySteps:
            type: array
            items:
              $ref: "#/components/schemas/DutyStep"
    Policy:
      type: object
      description: ODRL policy
      example:
        '@context': http://www.w3.org/ns/odrl.jsonld
        '@id': 0949ba30-680c-44e6-bc7d-1688cbe1847e
        '@type': odrl:Set
        permission:
          target: http://example.com/asset:9898.movie
          action:
            type: http://www.w3.org/ns/odrl/2/use
          constraint:
            leftOperand: https://w3id.org/edc/v0.0.1/ns/left
            operator: eq
            rightOperand: value
        prohibition: []
        obligation: []
    PolicyClass:
      required:
      - '@id'
      type: object
      properties:
        '@id':
          type: string
        profile:
          oneOf:
          - type: array
            items:
              type: string
          - type: string
        permission:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Permission"
        prohibition:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Prohibition"
        obligation:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Duty"
    PolicyDefinition:
      required:
      - '@context'
      - '@type'
      - policy
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        policy:
          $ref: "#/components/schemas/PolicyClass"
        privateProperties:
          type: object
    PolicyDefinitionInput:
      required:
      - '@context'
      - policy
      type: object
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/PolicyDefinition
        policy:
          $ref: "#/components/schemas/Policy"
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          uid: http://example.com/policy:1010
          profile: http://example.com/odrl:profile:02
          permission:
          - target: http://example.com/asset:9898.movie
            action: display
            constraint:
            - leftOperand: spatial
              operator: eq
              rightOperand: https://www.wikidata.org/wiki/Q183
              comment: i.e Germany
    PolicyDefinitionOutput:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/PolicyDefinition
        policy:
          $ref: "#/components/schemas/Policy"
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          uid: http://example.com/policy:1010
          permission:
          - target: http://example.com/asset:9898.movie
            action: display
            constraint:
            - leftOperand: spatial
              operator: eq
              rightOperand: https://www.wikidata.org/wiki/Q183
              comment: i.e Germany
        createdAt: 1688465655
    PolicyEvaluationPlan:
      required:
      - '@context'
      - '@type'
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        preValidators:
          type: array
          items:
            type: string
        postValidators:
          type: array
          items:
            type: string
        permissionSteps:
          type: array
          items:
            $ref: "#/components/schemas/PermissionStep"
        prohibitionSteps:
          type: array
          items:
            $ref: "#/components/schemas/ProhibitionStep"
        dutySteps:
          type: array
          items:
            $ref: "#/components/schemas/DutyStep"
    PolicyEvaluationPlanRequest:
      required:
      - '@context'
      - '@type'
      - policyScope
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        policyScope:
          type: string
    PolicyEvaluationPlanRequestSchema:
      type: object
      properties:
        policyScope:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': PolicyEvaluationPlanRequest
        policyScope: catalog
    PolicyEvaluationPlanSchema:
      type: object
      example:
        '@type': PolicyEvaluationPlan
        preValidators: DcpScopeExtractorFunction
        permissionSteps:
          '@type': PermissionStep
          isFiltered: false
          filteringReasons: []
          ruleFunctions: []
          constraintSteps:
            '@type': AtomicConstraintStep
            isFiltered: true
            filteringReasons:
            - leftOperand 'MembershipCredential' is not bound to scope 'request.catalog'
            - leftOperand 'MembershipCredential' is not bound to any function within
              scope 'request.catalog'
            functionParams:
            - '''MembershipCredential'''
            - EQ
            - '''active'''
          dutySteps: []
        prohibitionSteps: []
        obligationSteps: []
        postValidators: DefaultScopeMappingFunction
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
          edc: https://w3id.org/edc/v0.0.1/ns/
          odrl: http://www.w3.org/ns/odrl/2/
    PolicyValidationResult:
      required:
      - '@context'
      - '@type'
      - errors
      - isValid
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        isValid:
          type: boolean
        errors:
          type: array
          items:
            type: string
    PolicyValidationResultSchema:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        isValid:
          type: boolean
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': PolicyValidationResult
        isValid: false
        errors:
        - error1
        - error2
    Prohibition:
      type: object
      allOf:
      - $ref: "#/components/schemas/Rule"
    ProhibitionStep:
      required:
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/RuleStep"
      - properties:
          '@type':
            type: string
    Properties:
      type: object
    ProtocolVersion:
      type: object
      description: Protocol Version
      example:
        protocolVersions:
        - version: 2024/1
          path: /2024/1
        - version: v0.8
          path: /
    ProvisionHttpResponse:
      type: object
      properties:
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
    ProvisionerWebhookRequest:
      type: object
      properties:
        apiKeyJwt:
          type: string
        assetId:
          type: string
        contentDataAddress:
          $ref: "#/components/schemas/DataAddress"
        hasToken:
          type: boolean
        resourceDefinitionId:
          type: string
        resourceName:
          type: string
    QuerySpec:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/QuerySpec
        filterExpression:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        sortField:
          type: string
        sortOrder:
          type: string
          enum:
          - ASC
          - DESC
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': QuerySpec
        offset: 5
        limit: 10
        sortOrder: DESC
        sortField: fieldName
        filterExpression: []
    QuerySpecRoot:
      required:
      - '@context'
      - '@type'
      type: object
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/context-schema"
      - $ref: "#/components/schemas/QuerySpec_1"
    QuerySpec_1:
      required:
      - '@type'
      type: object
      properties:
        '@type':
          type: string
        offset:
          minimum: 0
          type: integer
        limit:
          minimum: 1
          type: integer
        sortField:
          type: string
        sortOrder:
          type: string
          enum:
          - ASC
          - DESC
        filterExpression:
          type: array
          items:
            $ref: "#/components/schemas/Criterion_1"
    Resource:
      required:
      - '@id'
      type: object
      properties:
        '@id':
          type: string
    RightOperand:
      oneOf:
      - type: string
      - type: object
      - type: array
    RootCatalog:
      required:
      - '@context'
      - participantId
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema_1"
        participantId:
          type: string
      allOf:
      - $ref: "#/components/schemas/Catalog_1"
    RootDataset:
      required:
      - '@context'
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema_1"
      allOf:
      - $ref: "#/components/schemas/Dataset_1"
    Rule:
      required:
      - action
      type: object
      properties:
        action:
          $ref: "#/components/schemas/Action"
        constraint:
          type: array
          items:
            $ref: "#/components/schemas/Constraint"
    RuleStep:
      type: object
      properties:
        isFiltered:
          type: boolean
        filteringReasons:
          type: array
          items:
            type: string
        constraintSteps:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintStep"
        ruleFunctions:
          type: array
          items:
            type: string
    Secret:
      required:
      - '@context'
      - '@type'
      - value
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        value:
          type: string
    SecretInput:
      required:
      - '@context'
      - value
      type: object
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Secret
        value:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': secret-id
        value: secret-value
    SecretOutput:
      required:
      - value
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/Secret
        value:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': secret-id
        '@type': https://w3id.org/edc/v0.0.1/ns/Secret
        value: secret-value
    SuspendTransfer:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/SuspendTransfer
        state:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/SuspendTransfer
        reason: a reason to suspend
    SuspendTransfer_1:
      required:
      - '@context'
      - '@type'
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        reason:
          type: string
    TerminateNegotiation:
      required:
      - '@context'
      - '@type'
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        reason:
          type: string
    TerminateNegotiationSchema:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TerminateNegotiation
        reason:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TerminateNegotiation
        '@id': negotiation-id
        reason: a reason to terminate
    TerminateTransfer:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TerminateTransfer
        state:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TerminateTransfer
        reason: a reason to terminate
    TerminateTransfer_1:
      required:
      - '@context'
      - '@type'
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        reason:
          type: string
    TransferProcess:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TransferProcess
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        contractAgreementId:
          type: string
        counterPartyAddress:
          type: string
        counterPartyId:
          type: string
        dataDestination:
          $ref: "#/components/schemas/DataAddress"
        errorDetail:
          type: string
        privateProperties:
          $ref: "#/components/schemas/Properties"
        protocol:
          type: string
        state:
          type: string
        type:
          type: string
          enum:
          - CONSUMER
          - PROVIDER
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TransferProcess
        '@id': process-id
        correlationId: correlation-id
        type: PROVIDER
        state: STARTED
        stateTimestamp: 1688465655
        assetId: asset-id
        contractId: contractId
        dataDestination:
          type: data-destination-type
        privateProperties:
          private-key: private-value
        errorDetail: eventual-error-detail
        createdAt: 1688465655
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
    TransferProcess_1:
      required:
      - '@context'
      - '@id'
      - '@type'
      - state
      - stateTimestamp
      - type
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        type:
          type: string
          enum:
          - CONSUMER
          - PROVIDER
        state:
          type: string
        stateTimestamp:
          type: integer
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/callback-address-schema"
        correlationId:
          type: string
        assetId:
          type: string
        contractId:
          type: string
        transferType:
          type: string
        errorDetail:
          type: string
        dataDestination:
          $ref: "#/components/schemas/data-address-schema"
    TransferRequest:
      required:
      - '@context'
      - contractId
      - counterPartyAddress
      - protocol
      - transferType
      type: object
      properties:
        '@context':
          type: object
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TransferRequest
        assetId:
          type: string
          deprecated: true
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/CallbackAddress"
        contractId:
          type: string
        counterPartyAddress:
          type: string
        dataDestination:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          $ref: "#/components/schemas/Properties"
        protocol:
          type: string
        transferType:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TransferRequest
        protocol: dataspace-protocol-http
        counterPartyAddress: http://provider-address
        contractId: contract-id
        transferType: transferType
        dataDestination:
          type: data-destination-type
        privateProperties:
          private-key: private-value
        callbackAddresses:
        - transactional: false
          uri: http://callback/url
          events:
          - contract.negotiation
          - transfer.process
          authKey: auth-key
          authCodeId: auth-code-id
    TransferRequest_1:
      required:
      - '@context'
      - '@type'
      - contractId
      - counterPartyAddress
      - protocol
      - transferType
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        '@type':
          type: string
        '@id':
          type: string
        counterPartyAddress:
          type: string
        protocol:
          type: string
        contractId:
          type: string
        transferType:
          type: string
        privateProperties:
          type: object
        dataDestination:
          $ref: "#/components/schemas/data-address-schema"
        callbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/callback-address-schema"
    TransferState:
      type: object
      properties:
        '@type':
          type: string
          example: https://w3id.org/edc/v0.0.1/ns/TransferState
        state:
          type: string
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': https://w3id.org/edc/v0.0.1/ns/TransferState
        state: STARTED
    TransferState_1:
      required:
      - '@context'
      - '@type'
      - state
      type: object
      properties:
        '@context':
          $ref: "#/components/schemas/context-schema"
        state:
          type: string
    XoneConstraintStep:
      required:
      - '@type'
      type: object
      allOf:
      - $ref: "#/components/schemas/MultiplicityConstraintStep"
      - properties:
          '@type':
            type: string
    asset-schema:
      title: AssetSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/Asset"
    callback-address-schema:
      title: CallbackAddressSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/CallbackAddress_1"
    catalog-request-schema:
      title: CatalogRequestSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/CatalogRequest_1"
    catalog-schema:
      title: CatalogSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/RootCatalog"
    context-schema:
      title: ContextSchema
      type: array
      allOf:
      - $ref: "#/components/schemas/ContextSchema"
      items:
        type: string
    context-schema_1:
      title: ContextSchema
      type: array
      allOf:
      - $ref: "#/components/schemas/ContextSchema"
      items:
        type: string
    contract-definition-schema:
      title: ContractDefinitionSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/ContractDefinition"
    contract-negotiation-schema:
      title: ContractNegotiationSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/ContractNegotiation_1"
    contract-offer-schema:
      title: ContractOfferSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/ContractOffer"
    contract-request-schema:
      title: ContractRequestSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/ContractRequest_1"
    contract-terminate-schema:
      title: ContractTerminateSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/TerminateNegotiation"
    data-address-schema:
      title: DataAddressSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/DataAddress_1"
    dataset-schema:
      title: DatasetSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/RootDataset"
    edr-entry-schema:
      title: EndpointDataReferenceEntrySchema
      type: object
      allOf:
      - $ref: "#/components/schemas/EndpointDataReferenceEntry_1"
    id-response-schema:
      title: IdResponseSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/IdResponse_1"
    policy-definition-schema:
      title: PolicyDefinitionSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/PolicyDefinition"
    policy-evaluation-plan-request-schema:
      title: PolicyEvaluationPlanRequestSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/PolicyEvaluationPlanRequest"
    policy-evaluation-plan-schema:
      title: PolicyEvaluationPlanSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/PolicyEvaluationPlan"
    policy-validation-result-schema:
      title: PolicyValidationResultSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/PolicyValidationResult"
    query-spec-schema:
      title: QuerySpecSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/QuerySpecRoot"
    secret-schema:
      title: SecretSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/Secret"
    transfer-process-schema:
      title: TransferProcessSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/TransferProcess_1"
    transfer-request-schema:
      title: TransferRequestSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/TransferRequest_1"
    transfer-suspend-schema:
      title: TransferSuspendSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/SuspendTransfer_1"
    transfer-terminate-schema:
      title: TransferTerminateSchema
      type: object
      allOf:
      - $ref: "#/components/schemas/TerminateTransfer_1"
